# TurboDedup Build Configuration

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "turbodedup"
dynamic = ["version"]
description = "High-Performance File Deduplication Scanner with GPU Acceleration & Smart Caching"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "TurboDedup Team", email = "info@turbodedup.dev"},
]
keywords = [
    "deduplication",
    "duplicate-files", 
    "file-management",
    "gpu-acceleration",
    "performance",
    "similarity-detection",
    "caching",
    "storage-optimization"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Archiving",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Environment :: Console",
]
dependencies = []

[project.optional-dependencies]
gpu = [
    "pycuda>=2022.2.2",
    "pyopencl>=2023.1.4",
    "numpy>=1.24.0",
]
similarity = [
    "Pillow>=10.0.0",
    "ImageHash>=4.3.1", 
    "librosa>=0.10.0",
    "numba>=0.56.0",
    "soundfile>=0.12.1",
    "resampy>=0.4.0",
    "python-Levenshtein>=0.21.0",
    "PyPDF2>=3.0.0",
    "python-docx>=0.8.11",
    "chardet>=5.0.0",
    "scipy>=1.10.0",
]
all = [
    "pycuda>=2022.2.2",
    "pyopencl>=2023.1.4",
    "numpy>=1.24.0",
    "Pillow>=10.0.0",
    "ImageHash>=4.3.1", 
    "librosa>=0.10.0",
    "numba>=0.56.0",
    "soundfile>=0.12.1",
    "resampy>=0.4.0",
    "python-Levenshtein>=0.21.0",
    "PyPDF2>=3.0.0",
    "python-docx>=0.8.11",
    "chardet>=5.0.0",
    "scipy>=1.10.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
]

[project.scripts]
turbodedup = "turbodedup.cli.main:main"
turbo-dedup = "turbodedup.cli.main:main"

[project.urls]
Homepage = "https://github.com/arjaygg/TurboDedup"
Repository = "https://github.com/arjaygg/TurboDedup"
Issues = "https://github.com/arjaygg/TurboDedup/issues"
Documentation = "https://github.com/arjaygg/TurboDedup/blob/main/README.md"

[tool.setuptools]
packages = ["turbodedup", "turbodedup.core", "turbodedup.utils", "turbodedup.cli"]
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "turbodedup.__version__"}

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["turbodedup"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]